1) PERMUTATION

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();  
        permu(s, "");  
    }

    public static void permu(String s, String a) {
        if (s.isEmpty()) {
            System.out.println(a);
            return;
        }

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            String r = s.substring(0, i) + s.substring(i + 1);
            permu(r, a + c);
        }
    }
}


2) COMBINATION

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();  
        comb(s, "");  
    }

    public static void comb(String s, String a) {
        if (s.isEmpty()) {
            System.out.println(a);
            return;
        }

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            String r = s.substring(0, i);
            comb(r, a + c);
        }
    }
}


3) A11B12C13.. ( IMP )

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();
        int i=0;
        while (i<s.length()){
            char c = s.charAt(i);
            i++;
            String d = "";
            while (i<s.length() && Character.isDigit(s.charAt(i))){
                d+=s.charAt(i);
                i++;
            }
            int n = Integer.parseInt(d);
            for (int j=0;j<n;j++){
                System.out.print(c);
            }
        }}}

4) TAYLOR SERIES

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int x = in.nextInt();
        int n = in.nextInt();

        double result = ser(x, n, 1, 1.0);
        System.out.println(result);
    }

    public static double ser(int x, int n, int i, double t) {
        if (i > n) return 1.0;  

        return t + ser(x, n, i + 1, t * x / i);
    }
}




