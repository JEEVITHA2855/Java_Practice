

Queue

import java.util.*;
class queue{
   private int size;
   private int rear;
   private  int a[];
   private int front;

public queue (int x){
    this.a= new int[x];
    this.rear=-1;
    this.front=0;
    this.size=x;
}
public void enqueue(int v){
    if (isFull()){
        System.out.println("Full");
    }
    a[++rear] = v;
}
public int dequeue(){
    if (isEmpty()){
        System.out.println("Empty");
    }
    return a[front++];
}
public int peek(){
    if (isEmpty()){
        System.out.println("Empty");
    }
    return a[front];
}
public void display(){
    if (isEmpty()){
        System.out.println("Empty");
    }
     System.out.print("Queue elements: ");
     for (int i=front;i<=rear;i++){
         System.out.print(a[i] + " ");
        }
        System.out.println();
    }
    public boolean isFull(){
        return rear == size-1;
    }
    public boolean isEmpty(){
        return rear==-1;
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter queue size: ");
        int size = sc.nextInt();
        queue q = new queue(size);

        while (true) {
            System.out.println("\n1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    int val = sc.nextInt();
                    q.enqueue(val);
                    break;

                case 2:
                    int removed = q.dequeue();
                    if (removed != -1)
                        System.out.println("Dequeued: " + removed);
                    break;

                case 3:
                    int front = q.peek();
                    if (front != -1)
                        System.out.println("Front: " + front);
                    break;

                case 4:
                    q.display();
                    break;

                case 5:
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}

Circular queue

import java.util.*;
class circularqueue{
   private int size;
   private int cap;
   private int rear;
   private  int a[];
   private int front;

public circularqueue(int x){
    this.a= new int[x];
    this.rear=-1;
    this.front=0;
    this.cap=x;
}
public void enqueue(int v){
    if (isFull()){
        System.out.println("Full");
    }
    rear=(rear+1)%cap;
    a[rear] = v;
    size++;
}
public int dequeue(){
    if (isEmpty()){
        System.out.println("Empty");
    }
    int v= a[front];
    front=(front+1)%cap;
    size--;
    return v;
}
public int peek(){
    if (isEmpty()){
        System.out.println("Empty");
    }
    return a[front];
}
public void display(){
    if (isEmpty()){
        System.out.println("Empty");
    }
     System.out.print("Queue elements: ");
     for (int i=front;i<=rear;i++){
         System.out.print(a[i] + " ");
        }
        System.out.println();
    }
    public boolean isFull(){
        return size == cap;
    }
    public boolean isEmpty(){
        return size==0;
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter queue size: ");
        int size = sc.nextInt();
        circularqueue q = new circularqueue(size);

        while (true) {
            System.out.println("\n1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    int val = sc.nextInt();
                    q.enqueue(val);
                    break;

                case 2:
                    int removed = q.dequeue();
                    if (removed != -1)
                        System.out.println("Dequeued: " + removed);
                    break;

                case 3:
                    int front = q.peek();
                    if (front != -1)
                        System.out.println("Front: " + front);
                    break;

                case 4:
                    q.display();
                    break;

                case 5:
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}

Reverse first k elements

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        Queue<Integer> q = new LinkedList<>();
        
        for (int i = 0; i < n; i++) {
            q.offer(in.nextInt());
        }
        int k = in.nextInt();

        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < k; i++) {
            stack.push(q.poll());
        }

        while (!stack.isEmpty()) {
            q.offer(stack.pop());
        }

        for (int i = 0; i < n - k; i++) {
            q.offer(q.poll());
        }
        System.out.println("After reversing first " + k + " elements: " + q);
    }
}

Palindrome

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
      
        Queue <Integer> q= new LinkedList<>();
        Stack <Integer> s= new Stack<>();
        
         for (int i = 0; i < n; i++) {
            int val = in.nextInt();
            q.offer(val); 
            s.push(val);
        }
          boolean pal=true;
        while (!q.isEmpty()) {
            if (!q.poll().equals(s.pop())) {
                pal=false;
                break;
            }
    }
    System.out.print(pal);
    }
}
Circular Queue using Linked List

import java.util.Scanner;

class Queue {
    class Node {
        int data;
        Node next;

        public Node(int x) {
            this.data = x;
            this.next = null;
        }
    }

    Node rear = null;
    Node front = null;

    public void enqueue(int v) {
        Node newnode = new Node(v);

        if (rear == null) {
            rear = front = newnode;
            rear.next = front;
        } else {
            rear.next = newnode;
            rear = newnode;
            rear.next = front;\
            
        }
    }

    public int dequeue() {
        if (isEmpty()) return -1;

        int val = front.data;

        if (rear == front) {
            front = rear = null;
        } else {
            front = front.next;
            rear.next = front;
        }

        return val;
    }

    public int peek() {
        if (isEmpty()) return -1;
        return front.data;
    }

    public boolean isEmpty() {
        return front == null;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }

        Node temp = front;
        System.out.print("Queue elements: ");
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != front);

        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Queue q = new Queue();

        while (true) {
            System.out.println("\n1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.print("Enter value to enqueue: ");
                    int val = sc.nextInt();
                    q.enqueue(val);
                    break;

                case 2:
                    int removed = q.dequeue();
                    if (removed == -1)
                        System.out.println("Queue is empty.");
                    else
                        System.out.println("Dequeued: " + removed);
                    break;

                case 3:
                    int front = q.peek();
                    if (front == -1)
                        System.out.println("Queue is empty.");
                    else
                        System.out.println("Front element: " + front);
                    break;

                case 4:
                    q.display();
                    break;

                case 5:
                    System.out.println("Exiting...");
                    return;

                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}

Implementation of stack using queue

import java.util.*;

public class Main {
    Queue<Integer> x = new LinkedList<>();

    public void push(int v) {
        x.offer(v);
        for (int i = 0; i < x.size() - 1; i++) {
            x.offer(x.poll());
        }
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return -1;
        }
        return x.poll();
    }

    public int top() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return -1;
        }
        return x.peek();
    }

    public boolean isEmpty() {
        return x.isEmpty();
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return;
        }

        System.out.println("Stack elements (top to bottom): " + x);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Main stack = new Main();

        while (true) {
            System.out.println("\n--- STACK USING SINGLE QUEUE ---");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Top");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.print("Enter value to push: ");
                    int val = sc.nextInt();
                    stack.push(val);
                    break;

                case 2:
                    int removed = stack.pop();
                    if (removed != -1)
                        System.out.println("Popped: " + removed);
                    break;

                case 3:
                    int top = stack.top();
                    if (top != -1)
                        System.out.println("Top element: " + top);
                    break;

                case 4:
                    stack.display();
                    break;

                case 5:
                    System.out.println("Exit");
                    return;

                default:
                    System.out.println("Invalid choice");
            }
        }
    }
}

