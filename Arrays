Intersection of two arrays

class Solution {
    public int[] intersection(int[] arr1, int[] arr2){
        HashSet <Integer> set1=new HashSet <>();
          HashSet <Integer> result=new HashSet <>();
          for (int num : arr1){
              set1.add(num);
          }
          for (int num:arr2){
          if (set1.contains(num)){
              result.add(num);
          }
       
    } int[] resArr =new int[result.size()];
    int i=0;
    for (int val : result){
        resArr[i++]=val;
    }
   
    return resArr;
}}



Maximum sub array

class Solution {
    public int maxSubArray(int[] nums) {
        int currSum = nums[0];
        int maxSum = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currSum = Math.max(nums[i], currSum + nums[i]);
            maxSum = Math.max(maxSum, currSum);
        }

        return maxSum;
    }
}

Merge sorted array 

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 =m-1;          
        int p2 =n-1;          
        int p = m+n-1;      


        while (p1 >= 0 && p2 >= 0) {
            if (nums1[p1] > nums2[p2]) {
                nums1[p] = nums1[p1];
                p1--;
            } else {
                nums1[p] = nums2[p2];
                p2--;
            }
            p--;
        }


        while (p2 >= 0) {
            nums1[p] = nums2[p2];
            p2--;
            p--;
        }
    }
}


Sort colours (ascending)

class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;


        while (mid <= high) {
            if (nums[mid] == 0) {
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                mid++;
            } else {
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }
}




Second largest

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];
       int largest = Integer.MIN_VALUE;
int second = Integer.MIN_VALUE;

        for (int i=0;i<n;i++){
            arr[i]=in.nextInt();
        }
        
        
        for (int i=0;i<n;i++){
        if (arr[i] > largest) {
    second = largest;
    largest = arr[i];
} 
else if (arr[i] > second && arr[i] != largest) {
    second = arr[i];}}

Move Zeros :

class Solution {
    public void moveZeroes(int[] nums) {
        int pos=0;


        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
             
                int temp = nums[i];
                nums[i] = nums[pos];
                nums[pos] = temp;
                pos++;
            }
        }}}



Array reverse : 

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	    Scanner in=new Scanner(System.in);
	    int n=in.nextInt();
	    
		int[] arr=new int[n];
		for (int i=0;i<n;i++){
		    arr[i]=in.nextInt();
		}
		int start=0,end=n-1;
		while (start <end){
		    int temp=arr[start];
		    arr[start]=arr[end];
		    arr[end]=temp;
		    start ++;
		    end--;
		}
		 for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
	    
	    
	    
	}
}

 Max and min:


import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int size=in.nextInt();
int[] arr=new int[size];

	for (int i=0;i<size;i++){
	    arr[i]=in.nextInt();
	}int max=arr[0];
int min=arr[0];
	for (int i=1;i<size;i++){
	    
	    if (arr[i]>max){
	        max=arr[i];
	    }
	    
	        if (arr[i]<min){
	            min=arr[i];
	        }
	    } 
	    System.out.println(max);
	    System.out.print(min);
	}
	}



Ascending order

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int size=in.nextInt();
int[] arr=new int[size];

	for (int i=0;i<size;i++){
	    arr[i]=in.nextInt();
	}
	for (int i=0;i<size-1;i++){
	    for (int j=0;j<size-i-1;j++){
	        if (arr[j]>arr[j+1]){
	            int temp=arr[j];
	            arr[j]=arr[j+1];
	            arr[j+1]=temp;
	        }
	    }
	    
	       
	}
	for (int i=0;i<size;i++){
	    System.out.print(arr[i]+" ");
}	}}


Descending

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int size=in.nextInt();
int[] arr=new int[size];

	for (int i=0;i<size;i++){
	    arr[i]=in.nextInt();
	}
	for (int i=0;i<size-1;i++){
	    for (int j=0;j<size-i-1;j++){
	        if (arr[j]<arr[j+1]){
	            int temp=arr[j];
	            arr[j]=arr[j+1];
	            arr[j+1]=temp;
	        }
	    }
	    
	       
	}
	for (int i=0;i<size;i++){
	    System.out.print(arr[i]+" ");
}	}}


Array sum

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int size=in.nextInt();
int[] arr=new int[size];
int sum=0;
	for (int i=0;i<size;i++){
	    arr[i]=in.nextInt();
	}
	for (int i=0;i<size;i++){
	    sum=sum+arr[i];
	}
	System.out.print(sum);
	}}


