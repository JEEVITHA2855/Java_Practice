ARRAY ADT

Insert , Delete , Update , Search , Reverse

    import java.util.*;
public class Main {
    private int[] a; // array
    private int n;   // current size
    private int c;   // total capacity

    public Main(int size) {
        this.c = size;
        a = new int[c];
        n = 0;
    }

    public void insert(int val) {
        if (n == c) {
            System.out.println("Overflow");
            return;
        }
        a[n++] = val;
    }

    public void insertAt(int i, int val) {
        if (n == c) {
            System.out.println("Overflow");
            return;
        }
        if (i < 0 || i > n) {
            System.out.println("Invalid index");
            return;
        }
        for (int j = n - 1; j >= i; j--) {
            a[j + 1] = a[j];
        }
        a[i] = val;
        n++;
    }

    public void delete(int i) {
        if (n == 0) {
            System.out.println("Underflow");
            return;
        }
        if (i < 0 || i >= n) {
            System.out.println("Invalid index");
            return;
        }
        for (int j = i; j < n - 1; j++) {
            a[j] = a[j + 1];
        }
        n--;
    }

    public void update(int i, int val) {
        if (n == 0) {
            System.out.println("Underflow");
            return;
        }
        if (i < 0 || i >= n) {
            System.out.println("Invalid index");
            return;
        }
        a[i] = val;
    }

    public void display() {
        for (int i = 0; i < n; i++) {
            System.out.print(a[i] + " ");
        }
        System.out.println();
    }

    public void rev() {
        for (int i = n - 1; i >= 0; i--) {
            System.out.print(a[i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Main ob = new Main(6);
        while (true) {
            System.out.println("\n1. Insert");
            System.out.println("2. Insert at index");
            System.out.println("3. Delete");
            System.out.println("4. Update");
            System.out.println("5. Display");
            System.out.println("6. Exit");
            System.out.println("7. Reverse Display"); 
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to insert: ");
                    int val = sc.nextInt();
                    ob.insert(val);
                    break;
                case 2:
                    System.out.print("Enter index: ");
                    int index = sc.nextInt();
                    System.out.print("Enter value: ");
                    int val2 = sc.nextInt();
                    ob.insertAt(index, val2);
                    break;
                case 3:
                    System.out.print("Enter index to delete: ");
                    int delIdx = sc.nextInt();
                    ob.delete(delIdx);
                    break;
                case 4:
                    System.out.print("Enter index to update: ");
                    int upIdx = sc.nextInt();
                    System.out.print("Enter new value: ");
                    int newVal = sc.nextInt();
                    ob.update(upIdx, newVal);
                    break;
                case 5:
                    ob.display();
                    break;
                case 6:
                    System.out.println("Exiting");
                    return;
                case 7:
                    ob.rev();  
                    break;
                default:
                    System.out.println("Invalid choice ");
            }
        }
    }
}



Set operations

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int sizeA = sc.nextInt();
        Set<Integer> setA = new HashSet<>();
        for (int i = 0; i < sizeA; i++) {
            setA.add(sc.nextInt());
        }

        int sizeB = sc.nextInt();
        Set<Integer> setB = new HashSet<>();
        for (int i = 0; i < sizeB; i++) {
            setB.add(sc.nextInt());
        }

        Set<Integer> union = new HashSet<>(setA);
        union.addAll(setB);
        System.out.println("\nUnion: " + union);

        Set<Integer> intersection = new HashSet<>(setA);
        intersection.retainAll(setB);
        System.out.println("Intersection: " + intersection);

        Set<Integer> difference = new HashSet<>(setA);
        difference.removeAll(setB);
        System.out.println("Difference (A - B): " + difference);
        
        Set<Integer> differencee = new HashSet<>(setB);
        differencee.removeAll(setA);
        System.out.println("Difference (B - A): " + differencee);
        
         Set<Integer> symDiff = new HashSet<>(union);
        symDiff.removeAll(intersection);
        System.out.println("Symmetric Difference: " + symDiff);
    }
}

