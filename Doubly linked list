import java.util.*;

class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

public class Main {
    Node head = null;

    public void insertBeg(int data) {
        Node newNode = new Node(data);
        if (head != null) {
            newNode.next = head;
            head.prev = newNode;
        }
        head = newNode;
    }

    public void insertPos(int pos, int data) {
        if (pos == 0) {
            insertBeg(data);
            return;
        }

        Node temp = head;
        int i = 0;

        while (temp != null && i < pos - 1) {
            temp = temp.next;
            i++;
        }

        if (temp == null) {
            System.out.println("Invalid position");
            return;
        }

        Node newNode = new Node(data);
        newNode.next = temp.next;
        newNode.prev = temp;

        if (temp.next != null) {
            temp.next.prev = newNode;
        }

        temp.next = newNode;
    }

    public void delete(int pos) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        if (pos == 0) {
            head = head.next;
            if (head != null) head.prev = null;
            return;
        }

        Node temp = head;
        int i = 0;

        while (temp != null && i < pos) {
            temp = temp.next;
            i++;
        }

        if (temp == null) {
            System.out.println("Invalid position");
            return;
        }

        if (temp.prev != null) temp.prev.next = temp.next;
        if (temp.next != null) temp.next.prev = temp.prev;
    }

    public boolean search(int x) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == x) return true;
            temp = temp.next;
        }
        return false;
    }

    public void displayForward() {
        Node temp = head;
        System.out.print("Forward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public void displayReverse() {
        Node temp = head;
        if (temp == null) {
            System.out.println("List is empty.");
            return;
        }

        while (temp.next != null) {
            temp = temp.next;
        }

        System.out.print("Reverse: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }

    public void findMiddle() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        System.out.println("Middle element: " + slow.data);
    }

    public static void main(String[] args) {
        Main dll = new Main();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- DOUBLY LINKED LIST MENU ---");
            System.out.println("1. Insert at Beginning");
            System.out.println("2. Insert at Position");
            System.out.println("3. Delete at Position");
            System.out.println("4. Search");
            System.out.println("5. Display Forward");
            System.out.println("6. Display Reverse");
            System.out.println("7. Find Middle");
            System.out.println("8. Exit");
            System.out.print("Choice: ");
            int ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.print("Enter data: ");
                    dll.insertBeg(sc.nextInt());
                    break;
                case 2:
                    System.out.print("Enter data and position: ");
                    dll.insertPos(sc.nextInt(), sc.nextInt());
                    break;
                case 3:
                    System.out.print("Enter position to delete: ");
                    dll.delete(sc.nextInt());
                    break;
                case 4:
                    System.out.print("Enter value to search: ");
                    System.out.println(dll.search(sc.nextInt()) ? "Found" : "Not found");
                    break;
                case 5:
                    dll.displayForward();
                    break;
                case 6:
                    dll.displayReverse();
                    break;
                case 7:
                    dll.findMiddle();
                    break;
                case 8:
                    System.out.println("Exiting... Bye babe ðŸ«¶");
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}
