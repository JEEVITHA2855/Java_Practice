Stack using array

import java.util.*;
public class Main
{
    private int size;
    private int a[];
    private int top;
    
    public Main(int x)
    {
    this.size=x;
    this.a=new int[size];
    this.top=-1;
    }
    
    public void push(int x)
    {
        if(isFull())
        {
            System.out.print("Overflow");
            return;
        }
        a[++top]=x;
    }
    
    public int pop()
    {
        if(isEmpty())
        {
            return -1;
        }
        return a[top--];
    }
    
    public int peek()
    {
        if(isEmpty())
        {
            return -1;
        }
        return a[top];
    }
    
    public boolean isEmpty()
    {
        return top==-1;
    }
    
    public boolean isFull()
    {
        return top==size-1;
    }
    
    public void display()
    {
        for (int i = 0; i <= top; i++)
        {
            System.out.print(a[i] + " ");
        }
    }

    
	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	    int x=sc.nextInt();
	    
		Main ob=new Main(x);
		
		for(int i=0;i<x;i++)
		{
		    int a =sc.nextInt();
		    ob.push(a);
		}
		
		System.out.println("Popped:"+ob.pop());
		
		System.out.println("Peek:"+ob.peek());
		
		System.out.print("All Elements:");
		ob.display();
		
	}
}



Stack using Linked List

import java.util.*;

class Stack {
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    Node top;

    public Stack() {
        this.top = null;
    }

    public void push(int data) {
        Node newnode = new Node(data);
        newnode.next = top;
        top = newnode;
    }

    public int pop() {
        if (top == null) {
            System.out.println("Stack Underflow");
            return -1;
        }
        int v = top.data;
        top = top.next;
        return v;
    }

    public int peek() {
        if (top == null) {
            System.out.println("Stack is empty");
            return -1;
        }
        return top.data;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public void display() {
        Node temp = top;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println("Null");
    }
}

public class Main {
    public static void main(String[] args) {
        Stack stack = new Stack();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.display();

        System.out.println("Top " + stack.peek());

        stack.pop();
        stack.display();

        System.out.println("Empty : " + stack.isEmpty());
    }
}

Stack with collections			

import java.util.*;
public class Main{
    public static void main(String[] args){
        Stack <Integer> x = new Stack<>();
        x.push(10);
        x.push(20);
        x.push(30);
        x.pop();
        System.out.print(x);
    }
}

Reverse the string

import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner in=new Scanner(System.in);
        String s=in.nextLine();
        Stack <Character> x = new Stack<>();
        for (char i : s.toCharArray()){
            x.push(i);
        }
        while(!x.isEmpty()){
            System.out.print(x.pop());
    }
        }
        
}

