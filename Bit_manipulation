BIT MANIPULATION

1) Swap two digits w/o third variable

import java.util.*;

public class Main
{
	public static void main(String[] args) {
		int a=10,b=9;
	a= a^b;
	b=a^b;
	a= a^b;
		System.out.println(a);
			System.out.println(b);
	}
}

2) Even or odd 

import java.util.*;

public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner (System.in);
	int a=in.nextInt();
		 System.out.println ((a&1)==0 ? "Even" : "No");
		    
		
}
}
	

** Int to Binary : System.out.println(Integer.toBinaryString(a)); ** 

3) Number of ones in a binary number

import java.util.*;

public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner (System.in);
	int a=in.nextInt();
	int c=0;
	while (a>0){
	    a=a&(a-1);
	    c++;
	}
	System.out.println(c);
	}
}

	
	
4) Iâ€™th bit of a number

import java.util.*;

public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner (System.in);
	int a=in.nextInt();
	int i=in.nextInt();
	int result = (a >> i) & 1;

	
	
	System.out.println(result);
	}
}

	
	
import java.util.*;

public class Main
{
	public static void main(String[] args) {
	Scanner in=new Scanner (System.in);
	int a=in.nextInt();
	int b=in.nextInt();
	


System.out.println(((a ^ b)< 0) ? "oppposite" : "Not opp");

}
}


	
	
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int a = in.nextInt();  
        int b = in.nextInt();  

        if ((b & (b - 1)) != 0) {
            System.out.println("Bit trick won't work ");
        } else {
            if ((a & (b - 1)) == 0) {
                System.out.println("yes");
            } else {
                System.out.println("no");
            }
        }
    }
}

RECURSION

1) Factorial


import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        int num = in.nextInt();
        System.out.println(factorial(num));
        
    }
    public static int factorial(int num){
        if (num==0){
            return 1;
        }
        else{
            return num*factorial (num-1);
        }
    }
}

2) Power of a number

import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int num = in.nextInt();
        int pow = in.nextInt();
        System.out.println(power(num,pow));
        
    }
    public static int power(int num, int pow){
        if (pow==0){
            return 1;
        }
        else{
            return num*power(num,pow-1);
        }
    }
}


3) Fibonacci series

import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int num = in.nextInt();
        for (int i=0;i<num;i++){
      
        System.out.println(fib(i));
        
    }}
    public static int fib(int num){
       
        if (num==0){
            return 0;
        }
        if (num==1){
            return 1;
        }
        return fib(num-1)+fib(num-2);
    }
}


4) Sum of Array 

import java.util.*;

public class Main {

    public static int sumArray(int[] arr, int index) {
        if (index == arr.length) 
        return 0;
        return arr[index] + sumArray(arr, index + 1);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        int n = in.nextInt();           
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = in.nextInt();      
        }

        int result = sumArray(arr, 0);
        System.out.println("Sum: " + result);
    }
}
5) Maximum of numbers

import java.util.*;

public class Main {

    public static int max(int[] arr, int index) {
        if (index == arr.length) 
        return 0;
        return Math.max(arr[index] , max(arr, index + 1));
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        int n = in.nextInt();           
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = in.nextInt();      
        }

        int result = max(arr, 0);
        System.out.println("Maximum: " + result);
    }
}


6) GCD

import java.util.*;

public class Main {

    public static int gcd( int a,int b) {
        if (b==0) 
        return a;
        return gcd(b,a%b);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        

        int a = in.nextInt();

        int b = in.nextInt();

        int result =gcd (a,b);       
        System.out.println(gcd(a,b));
    }
}

7) String reverse


import java.util.*;

public class Main {

    public static boolean isPalindrome(String a) {
        String rev = new StringBuilder(a).reverse().toString();
        return a.equals(rev);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String input = in.nextLine();

        if (isPalindrome(input)) {
            System.out.println("Palindrome ");
        } else {
            System.out.println("Not a Palindrome ");
        }
    }
}


